from fastapi import FastAPI, File, Form, UploadFile
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import httpx
import os
from dotenv import load_dotenv
import base64
import traceback

# .env dosyasÄ±nÄ± yÃ¼kle
# Render ortamÄ±nda, ortam deÄŸiÅŸkenlerinin otomatik yÃ¼klendiÄŸini varsayarÄ±z.
load_dotenv()
FAL_API_KEY = os.getenv("FAL_API_KEY")

# Fal.ai image-to-image endpoint
FAL_URL = "https://fal.run/fal-ai/flux/dev/image-to-image"

# FastAPI instance
app = FastAPI()

# CORS ayarÄ±
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Productionâ€™da sadece frontend URL ekle
    allow_methods=["*"],
    allow_headers=["*"],
)

# Basit test route
@app.get("/")
def home():
    return {"message": "Voltran Backend API Ã§alÄ±ÅŸÄ±yor ğŸš€"}

# Image-to-image endpoint
@app.post("/api/jobs")
async def create_job(prompt: str = Form(...), image: UploadFile = File(...)):
    # 422 hatasÄ±na karÅŸÄ± direnÃ§li hale getirildi. 
    # Hata devam ederse, bu dosya boyutu limitini aÅŸtÄ±ÄŸÄ±nÄ±z anlamÄ±na gelir.
    try:
        # 1. Gelen gÃ¶rseli hÄ±zlÄ±ca oku ve base64'e Ã§evir.
        # .read() iÅŸlemi await ile doÄŸru yapÄ±lÄ±yor.
        image_bytes = await image.read()
        
        # Dosya boyutunu kontrol etmek iyi bir pratik olabilir. 
        # Render'Ä±n limitleri genellikle 1MB-10MB arasÄ±ndadÄ±r.
        if len(image_bytes) > 5 * 1024 * 1024:  # Ã–rnek: 5MB'tan bÃ¼yÃ¼kse reddet
             return JSONResponse(status_code=413, content={"error": "Dosya boyutu 5MB limitini aÅŸÄ±yor."})

        image_b64 = base64.b64encode(image_bytes).decode("utf-8")
        image_data_url = f"data:{image.content_type};base64,{image_b64}"

        # 2. Fal.ai API'si iÃ§in Header ve Payload hazÄ±rla
        # FAL_API_KEY boÅŸsa hemen hata dÃ¶ndÃ¼r
        if not FAL_API_KEY:
             return JSONResponse(status_code=500, content={"error": "FAL_API_KEY ortam deÄŸiÅŸkeni ayarlanmamÄ±ÅŸ."})


        headers = {
            "Authorization": f"Key {FAL_API_KEY}",
            "Content-Type": "application/json"
        }

        payload = {
            "input": {
                "prompt": prompt,
                "image_url": image_data_url
            }
        }

        # 3. Fal.ai'ye isteÄŸi gÃ¶nder
        async with httpx.AsyncClient(timeout=180) as client:
            response = await client.post(FAL_URL, headers=headers, json=payload)

            if response.status_code != 200:
                # Fal.ai API'sinden gelen hata yanÄ±tÄ±nÄ± direkt olarak dÃ¶ndÃ¼r
                print("Fal.ai API HatasÄ±:", response.status_code, response.text)
                try:
                    content = response.json()
                except:
                    # JSON deÄŸilse, ham metni hata olarak ekle
                    content = {"error": "Fal.ai'den beklenmedik yanÄ±t.", "details": response.text}
                
                # Fal.ai'den gelen status kodu dÃ¶ndÃ¼rmek yerine, sunucudan 502 (Bad Gateway)
                # veya 500 dÃ¶nmek daha doÄŸrudur.
                return JSONResponse(status_code=502, content=content) 

            data = response.json()
            return {"status": "success", "result": data}

    except Exception as e:
        # Dosya okuma hatasÄ±, Form alanÄ±nÄ±n eksikliÄŸi veya diÄŸer backend hatalarÄ±
        error_details = traceback.format_exc()
        print("Backend HatasÄ±:", error_details)
        
        # EÄŸer hata Pydantic/FastAPI'den geliyorsa (422), bu try bloÄŸu yakalamayabilir.
        # Ama dosya okuma veya httpx hatalarÄ±nÄ± yakalamasÄ± iÃ§in Ã¶nemlidir.
        return JSONResponse(status_code=500, content={"error": "Sunucu iÃ§inde bir hata oluÅŸtu.", "details": str(e)})
